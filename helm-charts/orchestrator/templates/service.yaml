{{- $fullName := include "orchestrator.fullname" . }}
{{- $replicas := int .Values.replicas -}}
{{- range $i := until $replicas -}}
{{/*this service is needed for rafting. https://github.com/presslabs/mysql-operator/issues/107*/}}
apiVersion: v1
kind: Service
metadata:
    name: {{$fullName}}-{{$i}}-svc
    labels:
        app: {{$fullName}}
        chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
        release: "{{ $.Release.Name }}"
        heritage: "{{ $.Release.Service }}"
    annotations:
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
    type: ClusterIP
    ports:
    - name: web
      port: 80
      targetPort: 3000
    - name: raft
      port: 10008
      targetPort: 10008
    selector:
        statefulset.kubernetes.io/pod-name: {{$fullName}}-{{$i}}
---
{{end}}
---
{{/*{orchestrator will make sure that this service always talks to the leader}*/}}
apiVersion: v1
kind: Service
metadata:
    name: {{ template "orchestrator.fullname" . }}
    labels:
        app: {{ template "orchestrator.fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
spec:
    type: {{ .Values.service.type }}
    selector:
        app: {{ template "orchestrator.fullname" . }}
    ports:
    - name: http
      port: {{ .Values.service.port }}
      protocol: TCP
      targetPort: 3000
            {{- if .Values.service.nodePort }}
      nodePort: {{ .Values.service.nodePort }}
        {{- end }}
