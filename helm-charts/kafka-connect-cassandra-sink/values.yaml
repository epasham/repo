# Basic info
replicaCount: 1

image:
  repository: streamreactor/cassandra
  tag: 1.2.2
  pullPolicy: IfNotPresent

# Resource management
resources:
  limits:
    memory: 512Mi
  requests:
    memory: 256Mi

# Monitoring
monitoring:
  pipeline: "__REQUIRED__"
  enabled: true
  port: 9102
  path: "/metrics"

podManagementPolicy: OrderedReady


# kafka ssl
# The key and truststores file data are the base64 encoded contents of the files. YOU MUST PROVIDE THE DATA BASE64 encoded
# and added to the kafka secret and mounted into /mnt/connector-secrets
kafka:
  # replicationFactor for connect topics
  replicationFactor: 3
  securityProtocol:
  ssl:
    enabled: false
    trustStoreFileData:
    trustStorePassword:
    keyStoreFileData:
    keyStorePassword:
  sasl:
    enabled: false
    # keyTabData is the contents kerberos keytab file is using kerberos
    keyTabData: |-
             
    # jaasFileData is the contents of the kafka jaas file
    jaasFileData: |-
          
    #GSSAPI, SCRAM or PLAIN
    mechanism: GSSAPI
    # kerberos krb5 contents
    krb5Conf: |- 
  bootstrapServers: 
    - name: kafka
      port: 9092
      sslPort: 9093
      saslSslPort: 9094
      saslPlainTextPort: 9095       

schemaRegistries:
  enabled: true
  hosts:
    - host: schema-registry
      protocol: http
      port: 8081
      jmxPort: 9102    
        
# secretsProvider is either env (k8), vault (hashicorp) or azure (keyvault)
secretsProvider: env

# javaHeap options    
javaHeap: 256M

# clusterName The connect cluster name. This is the consumer group id for the backing topics
clusterName: "__REQUIRED__"

# restPort The rest port of Connect
restPort: 8083

# logLevel The log4j level
logLevel: INFO

# keyConverter The key converter to/from Connects struct
keyConverter: "io.confluent.connect.avro.AvroConverter"

# valueConverter The key converter to/from Connects struct
valueConverter: "io.confluent.connect.avro.AvroConverter"

# connectorClass
connectorClass: "com.datamountaineer.streamreactor.connect.cassandra.sink.CassandraSinkConnector"

# applicationId name of the connector
applicationId: "__REQUIRED__"




# topics to sink
topics: "__REQUIRED__"

# kcql KCQL expression describing field selection and routes. type: STRING importance: HIGH
kcql: "__REQUIRED__"

# enabled Enables the output for how many records have been processed type: BOOLEAN importance: MEDIUM
progressEnabled: true

# maxRetries The maximum number of times to try the write again. type: INT importance: MEDIUM
maxRetries: 20

# errorPolicy 
# Specifies the action to be taken if an error occurs while inserting the data.
#  There are three available options:
#     NOOP - the error is swallowed
#     THROW - the error is allowed to propagate.
#     RETRY - The exception causes the Connect framework to retry the message. The number of retries is set by connect.cassandra.max.retries.
# All errors will be logged automatically, even if the code swallows them.
#      type: STRING importance: HIGH
errorPolicy: THROW

# retryInterval The time in milliseconds between retries. type: INT importance: MEDIUM
retryInterval: 60000

# threadpoolSize 
# The sink inserts all the data concurrently. To fail fast in case of an error, the sink has its own thread pool.
# Set the value to zero and the threadpool will default to 4* NO_OF_CPUs. Set a value greater than 0
# and that would be the size of this threadpool. type: INT importance: MEDIUM
threadpoolSize: 0

# keySpace Keyspace to write to. type: STRING importance: HIGH
keySpace: "__REQUIRED__"

# contactPoints Initial contact point host for Cassandra including port. type: STRING importance: HIGH
contactPoints: localhost

# port Cassandra native port. type: INT importance: HIGH
port: 9042

# username Username to connect to Cassandra with. type: STRING importance: HIGH
username:

# password Password key for cassandra
password: "__REQUIRED__"

# consistencyLevel 
# Consistency refers to how up-to-date and synchronized a row of Cassandra data is on all of its replicas.
# Cassandra offers tunable consistency. For any given read or write operation, the client application decides how consistent the requested data must be.
#      type: STRING importance: MEDIUM
consistencyLevel: 

# sslEnabled Secure Cassandra driver connection via SSL. type: BOOLEAN importance: LOW
sslEnabled: false

# trustStoreType Type of the Trust Store, defaults to JKS type: STRING importance: MEDIUM
trustStoreType: JKS

# trustStoreFile The base64 encode contents of the truststore
trustStoreFileData:

# trustStorePassword Password Key for the client Trust Store in the secret
trustStorePassword: 

# keyStoreType Type of the Key Store, defauts to JKS type: STRING importance: MEDIUM
keyStoreType: JKS

# keyStorePassword Password key for the client Key Store type in the secret
keyStorePassword: 

# keyStoreFileData The base64 encode contents of the keystore
keyStoreFileData:

# sslClientCertAuth Enable client certification authentication by Cassandra. Requires KeyStore options to be set. type: BOOLEAN importance: LOW
sslClientCertAuth: false

# mappingCollectionToJson Mapping columns with type Map, List and Set like json
mappingCollectionToJson: true
