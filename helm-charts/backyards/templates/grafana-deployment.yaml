{{- if .Values.grafana.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "grafana.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "grafana.name" . }}
    app.kubernetes.io/name: {{ include "grafana.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
    app.kubernetes.io/component: grafana
    app.kubernetes.io/part-of: {{ include "backyards.name" . }}
    helm.sh/chart: {{ include "backyards.chart" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "grafana.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "grafana.name" . }}
        app.kubernetes.io/name: {{ include "grafana.name" . }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
        app.kubernetes.io/component: grafana
        app.kubernetes.io/part-of: {{ include "backyards.name" . }}
        helm.sh/chart: {{ include "backyards.chart" . }}
    spec:
      securityContext:
        runAsUser: 472
        fsGroup: 472
      containers:
        - name: grafana
          image: "{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}"
          imagePullPolicy: {{ .Values.grafana.image.pullPolicy | default "Always" }}
          ports:
          - containerPort: 3000
          readinessProbe:
            httpGet:
              path: /login
              port: 3000
          env:
          - name: GRAFANA_PORT
            value: "3000"
          - name: GF_SERVER_ROOT_URL
            value: "%(protocol)s://%(domain)s{{ .Values.grafana.externalUrl }}/"
          - name: GF_SERVER_SERVE_FROM_SUB_PATH
            value: "true"
{{- if .Values.grafana.security.enabled }}
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.grafana.security.secretName }}
                key: {{ .Values.grafana.security.usernameKey }}
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.grafana.security.secretName }}
                key: {{ .Values.grafana.security.passphraseKey }}
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "false"
          - name: GF_AUTH_DISABLE_LOGIN_FORM
            value: "false"
{{- else }}
          - name: GF_AUTH_BASIC_ENABLED
            value: "false"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            value: Admin
{{- end }}
          - name: GF_PATHS_DATA
            value: /data/grafana
          - name: GF_SECURITY_ALLOW_EMBEDDING
            value: "true"
          {{- range $key, $value := .Values.grafana.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
          {{- range $key, $secret := .Values.grafana.envSecrets }}
          - name: {{ $key }}
            valueFrom:
              secretKeyRef:
                name: {{ $secret }}
                key: {{ $key | quote }}
          {{- end }}
          resources:
{{- if .Values.grafana.resources }}
{{ toYaml .Values.grafana.resources | indent 12 }}
{{- end }}
          volumeMounts:
          - name: data
            mountPath: /data/grafana
          {{- range $path, $bytes := .Files.Glob "resources/*.json" }}
          {{- $filename := trimSuffix (ext $path) (base $path) }}
          - name: dashboards-istio-{{ $filename }}
            mountPath: "/var/lib/grafana/dashboards/istio/{{ base $path }}"
            subPath: {{ base $path }}
            readOnly: true
          {{- end }}
          - name: config
            mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
            subPath: datasources.yaml
          - name: config
            mountPath: "/etc/grafana/provisioning/dashboards/dashboardproviders.yaml"
            subPath: dashboardproviders.yaml
{{- if .Values.grafana.tolerations }}
      tolerations:
{{ toYaml .Values.grafana.tolerations | indent 6 }}
{{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ include "grafana.fullname" . }}
      - name: data
        emptyDir: {}
{{- range $path, $bytes := .Files.Glob "resources/*.json" }}
{{- $filename := trimSuffix (ext $path) (base $path) }}
      - name: dashboards-istio-{{ $filename }}
        configMap:
          name:  {{ include "grafana.fullname" $ }}-dashboards-{{ $filename }}
{{- end }}
{{- end }}
