apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ include "fullname" . }}
  labels:
    app: {{ include "fullname" . | quote }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service }}
    lenses.io/app: {{ include "fullname" . }}
    lenses.io/app.type: lenses-connector
    lenses.io/pipeline: {{ .Values.monitoring.pipeline | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ template "fullname" . }}-headless
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  template:
    metadata:
      labels:
        app: {{ include "fullname" . | quote }}
        release: {{ .Release.Name | quote }}
        hostPort: {{ .Values.restPort | quote }}
        containerPort: {{ .Values.restPort | quote }}
        lenses.io/app: {{ include "fullname" . }}        
        lenses.io/pipeline: {{ .Values.monitoring.pipeline | quote }}
        lenses.io/app.type: lenses-connector       
      annotations:
        prometheus.io/scrape: {{ .Values.monitoring.enabled | quote }}
        prometheus.io/port: {{ .Values.monitoring.port | quote }}
        prometheus.io/path: {{ .Values.monitoring.path | quote }}
    spec:
      {{- if or .Values.kafka.ssl.enabled .Values.kafka.sasl.enabled .Values.tlsEnabled }} 
      volumes:
        {{- if .Values.tlsEnabled }}
        - name: connector-secrets
          secret:
            secretName: {{ include "fullname" . }}
            defaultMode: 256
            items:
              - key: server.crt
                path: server.crt
              - key: ca.crt 
                path: ca.crt
              - key: server.key
                path: server.key
        {{- end }}        
        {{- if or .Values.kafka.ssl.enabled .Values.kafka.sasl.enabled }}        
        - name: kafka-secrets
          secret:
            secretName: {{ include "fullname" . }}-kafka-secrets
            defaultMode: 256
            items:
              {{- if .Values.kafka.ssl.enabled }}
              - key: client.keystore.jks
                path: client.keystore.jks
              - key: client.truststore.jks 
                path: client.truststore.jks
              {{- end }}  
              {{- if .Values.kafka.sasl.enabled }}
              - key: jaas.conf
                path: jaas.conf
              - key: keytab
                path: keytab  
              {{- end }} 
        {{- if eq .Values.kafka.sasl.mechanism "GSSAPI" }}
        - name: krb
          configMap:
            name: {{ include "fullname" . | quote }}
        {{- end }}                     
        {{- end }} 
      {{- end }}            
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.restPort }}
        livenessProbe:
          exec:
            command:
            - /opt/lenses/bin/liveliness
          initialDelaySeconds: 30
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.resources | indent 10 }}
        {{- if or .Values.kafka.ssl.enabled .Values.kafka.sasl.enabled .Values.tlsEnabled }} 
        volumeMounts:
          {{- if .Values.tlsEnabled }}
          - name: connector-secrets
            mountPath: "/mnt/connector-secrets" 
          {{- end }}  
          {{- if or .Values.kafka.ssl.enabled .Values.kafka.sasl.enabled }}
          - name: kafka-secrets
            mountPath: "/mnt/secrets" 
          {{- if eq .Values.kafka.sasl.mechanism "GSSAPI" }}
          - name: krb
            mountPath: "/etc/krb5.conf"
            subPath: "krb5.conf"
          {{- end }}            
          {{- end }}  
        {{- end }} 
        env:
        # JVM Heap Allowance
        - name: KAFKA_HEAP_OPTS
          value: -Xmx{{ .Values.javaHeap }}
        - name: CONNECT_LOG4J_ROOT_LOGLEVEL
          value: {{ .Values.logLevel | quote }}
        - name: CONNECT_GROUP_ID
          value: {{ .Values.clusterName | quote }}
        - name: CONNECT_BOOTSTRAP_SERVERS
          value: {{ include "bootstrapBrokers" . | quote }}
        - name: CONNECT_REST_PORT
          value: {{ .Values.restPort | quote }}
        - name: CONNECT_CONFIG_STORAGE_TOPIC
          value: "connect-{{ .Values.clusterName }}-configs"
        - name: CONNECT_OFFSET_STORAGE_TOPIC
          value: "connect-{{ .Values.clusterName }}-offsets"
        - name: CONNECT_STATUS_STORAGE_TOPIC
          value: "connect-{{ .Values.clusterName }}-statuses"
        - name: CONNECT_KEY_CONVERTER
          value: "{{ .Values.keyConverter }}"
        - name: CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE
          value: "{{ .Values.keyConverterSchemasEnable }}"
        - name: CONNECT_VALUE_CONVERTER
          value: "{{ .Values.valueConverter }}"
        - name: CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE
          value: "{{ .Values.valueConverterSchemasEnable }}"
        - name: CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL
          value: {{ include "registries" . | quote }}
        - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
          value: {{ include "registries" . | quote }}
        - name: CONNECT_INTERNAL_KEY_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_INTERNAL_VALUE_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_REST_ADVERTISED_HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name:  CONNECT_PLUGIN_PATH
          value: "/opt/lenses/lib"
        - name:  CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR
          value: {{ .Values.kafka.replicationFactor | quote }}
        - name:  CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR
          value: {{ .Values.kafka.replicationFactor | quote }} 
        - name:  CONNECT_STATUS_STORAGE_REPLICATION_FACTOR
          value: {{ .Values.kafka.replicationFactor | quote }}  

        - name: CONNECT_PRODUCER_SECURITY_PROTOCOL
          value: {{ include "securityProtocol" . | quote }}
        - name: CONNECT_CONSUMER_SECURITY_PROTOCOL
          value: {{ include "securityProtocol" . | quote }}          
        - name: CONNECTOR_PRODUCER_SECURITY_PROTOCOL
          value: {{ include "securityProtocol" . | quote }}  
        - name: CONNECTOR_CONSUMER_SECURITY_PROTOCOL
          value: {{ include "securityProtocol" . | quote }}  

        {{- if .Values.kafka.sasl.enabled }}
        - name: KAFKA_OPTS
          value: "-Djava.security.auth.login.config=/mnt/secrets/jaas.conf -Xmx{{ .Values.javaHeap }}"        
        - name: CONNECT_PRODUCER_SASL_MECHANISM
          value: {{ default "GSSAPI" .Values.kafka.sasl.mechanism | quote }}
        - name: CONNECT_CONSUMER_SASL_MECHANISM
          value: {{ default "GSSAPI" .Values.kafka.sasl.mechanism | quote }}     
        - name: CONNECTOR_PRODUCER_SASL_MECHANISM
          value: {{ default "GSSAPI" .Values.kafka.sasl.mechanism | quote }}  
        - name: CONNECTOR_CONSUMER_SASL_MECHANISM
          value: {{ default "GSSAPI" .Values.kafka.sasl.mechanism | quote }}      
        {{- end }}  
   
        {{- if .Values.kafka.ssl.enabled }}
        - name: CONNECT_PRODUCER_SSL_TRUSTSTORE_LOCATION
          value: "/mnt/secrets/client.truststore.jks"
        - name: CONNECT_CONSUMER_SSL_TRUSTSTORE_LOCATION
          value: "/mnt/secrets/client.truststore.jks"
        - name: CONNECT_PRODUCER_SSL_KEYSTORE_LOCATION
          value: "/mnt/secrets/client.keystore.jks"
        - name: CONNECT_CONSUMER_SSL_KEYSTORE_LOCATION
          value: "/mnt/secrets/client.keystore.jks"
        - name: WORKER_CONNECT_SECRET_PRODUCER_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ include "fullname" . }}-kafka-secrets"
              key:  "client.truststore.password"
        - name: WORKER_CONNECT_SECRET_CONSUMER_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ include "fullname" . }}-kafka-secrets"
              key:  "client.truststore.password"                                  
        - name: WORKER_CONNECT_SECRET_PRODUCER_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ include "fullname" . }}-kafka-secrets"
              key:  "client.keystore.password"
        - name: WORKER_CONNECT_SECRET_CONSUMER_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ include "fullname" . }}-kafka-secrets"
              key:  "client.keystore.password"              

        - name: CONNECTOR_PRODUCER_SSL_TRUSTSTORE_LOCATION
          value: "/mnt/secrets/client.truststore.jks"
        - name: CONNECTOR_CONSUMER_SSL_TRUSTSTORE_LOCATION
          value: "/mnt/secrets/client.truststore.jks"
        - name: CONNECTOR_PRODUCER_SSL_KEYSTORE_LOCATION
          value: "/mnt/secrets/client.keystore.jks"
        - name: CONNECTOR_CONSUMER_SSL_KEYSTORE_LOCATION
          value: "/mnt/secrets/client.keystore.jks"
        - name: SECRET_PRODUCER_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ include "fullname" . }}-kafka-secrets"
              key:  "client.truststore.password"
        - name: SECRET_CONSUMER_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ include "fullname" . }}-kafka-secrets"
              key:  "client.truststore.password"                                  
        - name: SECRET_PRODUCER_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ include "fullname" . }}-kafka-secrets"
              key:  "client.keystore.password"
        - name: SECRET_CONSUMER_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ include "fullname" . }}-kafka-secrets"
              key:  "client.keystore.password"  
        {{- end }}
  

        # Connector properties
        - name: SECRETS_PROVIDER
          value: {{ .Values.secretsProvider | quote }} 
        - name: CONNECTOR_NAME
          value: {{ .Values.applicationId | quote }}
        - name: CONNECTOR_GROUP_ID
          value: {{ .Values.applicationId | quote }}
        - name: CONNECTOR_CONNECTOR_CLASS
          value: {{ .Values.connectorClass | quote }}
        - name: CONNECTOR_TASKS_MAX
          value: {{ .Values.replicaCount | quote }}
        - name: CONNECTOR_CONNECT_MQTT_KCQL
          value: {{ .Values.kcql | quote }}          
        - name: CONNECTOR_CONNECT_MQTT_USERNAME
          value: {{ .Values.username | quote }}
        - name: SECRET_CONNECT_MQTT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "fullname" . }}
              key:  "connect.mqtt.password"
        - name: CONNECTOR_CONNECT_MQTT_CLIENT_ID
          value: {{ .Values.clientId | quote }}
        - name: CONNECTOR_CONNECT_MQTT_CLEAN
          value: {{ .Values.clean | quote }}
        - name: CONNECTOR_CONNECT_MQTT_SERVICE_QUALITY
          value: {{ .Values.serviceQuality | quote }}
        - name: CONNECTOR_CONNECT_MQTT_KEEP_ALIVE
          value: {{ .Values.keepAlive | quote }}
        - name: CONNECTOR_CONNECT_MQTT_TIMEOUT
          value: {{ .Values.timeout | quote }}
        - name: CONNECTOR_CONNECT_MQTT_POLLING_TIMEOUT
          value: {{ .Values.pollingTimeout | quote }}                 
        - name: CONNECTOR_CONNECT_PROGRESS_ENABLED
          value: {{ .Values.progressEnabled | quote }}
        - name: CONNECTOR_CONNECT_MQTT_HOSTS
          value: {{ .Values.hosts | quote }}
        - name: CONNECTOR_CONNECT_MQTT_CONVERTER_THROW_ON_ERROR
          value: {{ .Values.converterThrowOnError | quote }}
        - name: CONNECTOR_CONNECT_CONVERTER_AVRO_SCHEMAS
          value: {{ .Values.converterAvroSchemas | quote }}

        {{- if .Values.tlsEnabled }}
        - name: CONNECTOR_CONNECT_MQTT_SSL_CA_CERT
          value: "/mnt/connector-secrets/ca.crt"
        - name: CONNECTOR_CONNECT_MQTT_SSL_CERT
          value: "/mnt/connector-secrets/server.crt"
        - name: CONNECTOR_CONNECT_MQTT_SSL_KEY
          value: "/mnt/connector-secrets/server.key"
        {{- end }}
